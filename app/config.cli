embed-server --server-config=standalone-full.xml

### 1. Adicionando Módulo do MySQL ####
module add --name=com.mysql --dependencies=jakarta.transaction.api,javax.api --resources=/tmp/mysql-connector-j.jar

### 2. Adicionando DataSource no Subsystem ####
/subsystem=datasources/jdbc-driver=mysql:add(driver-module-name=com.mysql, driver-xa-datasource-class-name=com.mysql.cj.jdbc.MysqlXADataSource)

## 2.1 Adicionando os DataSources do sistema de chamados e dos textos prontos ####
data-source add --name=OtrsDS --driver-name=mysql --jndi-name=java:jboss/datasources/OtrsDS --connection-url=jdbc:mysql://${env.MYSQL_OTRS_DATABASE_HOST}:3306/${env.MYSQL_OTRS_DATABASE} --user-name=${env.MYSQL_OTRS_USER} --password=${env.MYSQL_OTRS_PASSWORD} --enabled=true
data-source add --name=ProblemaDS --driver-name=mysql --jndi-name=java:jboss/datasources/ProblemaDS --connection-url=jdbc:mysql://${env.MYSQL_OTRS_TEXTOS_PRONTOS_DATABASE_HOST}:3306/${env.MYSQL_OTRS_TEXTOS_PRONTOS_DATABASE} --user-name=${env.MYSQL_OTRS_TEXTOS_PRONTOS_USER} --password=${env.MYSQL_OTRS_TEXTOS_PRONTOS_PASSWORD} --enabled=true

### 3.Criando a Fila JMS ###
jms-queue add --queue-address=jms.queue.OtrsEmailQueue --entries=java:/jms/queue/OtrsEmailQueue

### 4. Criando o socket Binding ###
/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=my-smtp-binding:add(host=${env.OTRS_MAIL_SMTP_HOST}, port=${env.OTRS_MAIL_SMTP_PORT})

### 5. Criando o Mail Session ###
/subsystem=mail/mail-session=otrsMailSession:add(jndi-name=java:jboss/mail/OtrsMailSession)

### 6. Definindo o socket binding criado para o Session anteriormente criado ###
/subsystem=mail/mail-session=otrsMailSession/server=smtp:add(outbound-socket-binding-ref=my-smtp-binding, username=${env.OTRS_MAIL_SESSION_USER}, password=${env.OTRS_MAIL_SESSION_PASSWORD}, tls=true)


### Autenticação ###

### 7.1 Criando o Realm JDBC (Plain Text Password) ###
/subsystem=elytron/jdbc-realm=otrs-jdbc-realm:add(principal-query=[{data-source=ProblemaDS,clear-password-mapper={password-index=1},sql="SELECT u.password FROM users u WHERE u.username = ?"},{data-source=ProblemaDS,attribute-mapping=[{index=1,to=roles}],sql="SELECT r.name FROM users_roles ur INNER JOIN roles r ON ur.fk_role_id = r.id INNER JOIN users u ON u.id=ur.fk_user_id WHERE u.username = ?"}]

### 7.2 Criando o Role Decoder
/subsystem=elytron/simple-role-decoder=attribute-to-roles:add(attribute=roles)

### 7.3 Definindo o Realm criado como padrão do ApplicationDomain padrão do Wildfly ###
### Isto é necessário pelo fato do sistema fazer uso de EJBs ###
batch
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=realms, value=[{realm=otrs-jdbc-realm, role-decoder=attribute-to-roles}])
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=default-realm,value=otrs-jdbc-realm)
run-batch


## 7.2 Criando o Security Domain ####
#/subsystem=elytron/security-domain=otrsSD:add(role-decoder=attribute-to-roles, realms=[{realm=otrs-jdbc-realm,role-decoder=attribute-to-roles}],permission-mapper=default-permission-mapper)

## 7.3 Criando a Http Authentication Factory ####
#/subsystem=elytron/http-authentication-factory=otrs-http-auth:add(http-server-mechanism-factory=global,security-domain=otrsSD,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=otrs-jdbc-realm}]}])

## 7.4 Criando a Http Sec Domain
#/subsystem=undertow/application-security-domain=otrsHttpSD:add(http-authentication-factory=otrs-http-auth)

## 7.5 Criando o Subsytem ejb3
#/subsystem=ejb3/application-security-domain=otrs-ejb-sd:add(security-domain=otrsSD)


## Security Logging ###
#/subsystem=logging/logger=org.jboss.security:add(level=ALL)

#/subsystem=logging/logger=org.jboss.as.security:add(level=ALL)

#/subsystem=logging/logger=org.picketbox:add(level=ALL)

#/subsystem=logging/logger=org.jboss.as.domain.management.security:add(level=ALL)

#/subsystem=logging/logger=org.wildfly.security:add(level=ALL)

#/subsystem=logging/logger=org.wildfly.elytron:add(level=ALL)

#/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=ALL)


stop-embedded-server
